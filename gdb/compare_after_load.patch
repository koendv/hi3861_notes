diff --git a/gdb/remote.c b/gdb/remote.c
index 1f977d57fba..0078335f16a 100644
--- a/gdb/remote.c
+++ b/gdb/remote.c
@@ -1609,6 +1609,16 @@ show_interrupt_sequence (struct ui_file *file, int from_tty,
    expects BREAK g which is Magic SysRq g for connecting gdb.  */
 static bool interrupt_on_connect = false;
 
+/* This boolean variable specifies whether to always run 'compare-sections'
+   after 'load'. This verifies the debugger probe flashes correctly.
+   */
+bool compare_sections_after_load = false;
+
+bool always_compare_sections_after_load()
+{
+    return compare_sections_after_load;
+}
+
 /* This variable is used to implement the "set/show remotebreak" commands.
    Since these commands are now deprecated in favor of "set/show remote
    interrupt-sequence", it no longer has any effect on the code.  */
@@ -11048,7 +11058,7 @@ remote_target::verify_memory (const gdb_byte *data, CORE_ADDR lma, ULONGEST size
    with the same memory range on the target, and reports mismatches.
    Useful for verifying the image on the target against the exec file.  */
 
-static void
+void
 compare_sections_command (const char *args, int from_tty)
 {
   asection *s;
@@ -11057,8 +11067,9 @@ compare_sections_command (const char *args, int from_tty)
   bfd_vma lma;
   int matched = 0;
   int mismatched = 0;
-  int res;
+  int res = 0;
   int read_only = 0;
+  int brief = 0;
 
   if (!current_program_space->exec_bfd ())
     error (_("command cannot be used without an exec file"));
@@ -11068,6 +11079,11 @@ compare_sections_command (const char *args, int from_tty)
       read_only = 1;
       args = NULL;
     }
+  else if (args != NULL && strcmp (args, "-b") == 0)
+    {
+      brief = 1;
+      args = NULL;
+    }
 
   for (s = current_program_space->exec_bfd ()->sections; s; s = s->next)
     {
@@ -11099,6 +11115,9 @@ compare_sections_command (const char *args, int from_tty)
 	       paddress (target_gdbarch (), lma),
 	       paddress (target_gdbarch (), lma + size));
 
+      if (res && brief)
+        continue;
+
       printf_filtered ("Section %s, range %s -- %s: ", sectname,
 		       paddress (target_gdbarch (), lma),
 		       paddress (target_gdbarch (), lma + size));
@@ -11110,6 +11129,8 @@ compare_sections_command (const char *args, int from_tty)
 	  mismatched++;
 	}
     }
+  if ((mismatched == 0) && brief)
+    printf_filtered ("sections matched.\n");
   if (mismatched > 0)
     warning (_("One or more sections of the target image does not match\n\
 the loaded file\n"));
@@ -15025,6 +15046,14 @@ If set, interrupt sequence is sent to remote target."),
 			   NULL, NULL,
 			   &remote_set_cmdlist, &remote_show_cmdlist);
 
+  add_setshow_boolean_cmd ("compare_sections_after_load", class_support,
+			   &compare_sections_after_load, _("\
+Set whether to always run 'compare-sections' after 'load'."), _("\
+Show whether to always run 'compare-sections' after 'load'."), _("\
+If set, compare-sections is always run after a load."),
+			   NULL, NULL,
+			   &remote_set_cmdlist, &remote_show_cmdlist);
+
   /* Install commands for configuring memory read/write packets.  */
 
   add_cmd ("remotewritesize", no_class, set_memory_write_packet_size, _("\
diff --git a/gdb/remote.h b/gdb/remote.h
index 0ddf55d19d3..587c178aee3 100644
--- a/gdb/remote.h
+++ b/gdb/remote.h
@@ -30,6 +30,11 @@ class process_stratum_target;
 
 extern bool remote_debug;
 
+/* True if 'compare_sections' is run after every 'load' */
+
+extern bool always_compare_sections_after_load();
+extern void compare_sections_command (const char *args, int from_tty);
+
 /* Print a "remote" debug statement.  */
 
 #define remote_debug_printf(fmt, ...) \
diff --git a/gdb/symfile.c b/gdb/symfile.c
index 89469a3d3dc..d6dc04e9341 100644
--- a/gdb/symfile.c
+++ b/gdb/symfile.c
@@ -1829,6 +1829,10 @@ load_command (const char *arg, int from_tty)
   /* After re-loading the executable, we don't really know which
      overlays are mapped any more.  */
   overlay_cache_invalid = 1;
+
+  /* optionally check flash */
+  if (always_compare_sections_after_load())
+    compare_sections_command("-b", from_tty);
 }
 
 /* This version of "load" should be usable for any target.  Currently
